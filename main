from lief import PE
import os
from binascii import b2a_hex
import hashlib
from ppdeep import hash, hash_from_file, compare
import ppdeep

def compare(source_file, target_file):
    source_binary = PE.parse(source_file)
    target_binary = PE.parse(target_file)
    source_file_name, target_file_name = os.path.basename(source_file), os.path.basename(target_file)
    source_file_name1, source_extension = os.path.splitext(source_file_name)
    target_file_name1, target_extension = os.path.splitext(target_file_name)
    source_file_size, target_file_size = os.path.getsize(source_file), os.path.getsize(target_file)
    source_sections, target_sections = source_binary.sections, target_binary.sections
    source_dict, target_dict = {}, {}
    source_dict.update({'F_Name':source_file_name1,'F_Ext':source_extension, 'F_Size': source_file_size})
    target_dict.update({'F_Name':target_file_name1,'F_Ext':target_extension, 'F_Size': target_file_size})
    source_fuzzy = hash_from_file(source_file)
    target_fuzzy = hash_from_file(target_file)
    if source_fuzzy != target_fuzzy:
        source_dict['SSDeep'], target_dict['SSDeep'] = (source_fuzzy), (target_fuzzy)
        with open(source_file, 'rb') as source_in, open(target_file, 'rb') as target_in:
            s_binary_header, t_binary_header = source_in.read(32), target_in.read(32)
            s_header, t_header = b2a_hex(s_binary_header).decode(), b2a_hex(t_binary_header).decode()
            source_dict['First_Hex'] = (s_header)
            target_dict['First_Hex'] = (t_header)
            source_in.seek(0, 0), target_in.seek(0, 0)
            for s_section in source_sections:
                s_flags = ""
                for flag in s_section.characteristics_lists:
                    s_flags += str(flag).split(".")[-1] + " "
                source_dict[s_section.name + ' Offset'] = s_section.offset
                source_dict[s_section.name + ' Size'] = s_section.size
                source_dict[s_section.name + ' Percent of File'] = round(s_section.size / source_file_size * 100, 2)
                source_dict[s_section.name + ' Virtual Address'] = s_section.virtual_address
                source_dict[s_section.name + ' Virtual Size'] = s_section.virtual_size
                source_dict[s_section.name + ' Flags'] = s_flags
                source_dict[s_section.name + ' Entropy'] = round(s_section.entropy, 4)
                source_in.seek(s_section.offset)               # Raw Address Offset
                s_sha256 = hashlib.sha256()
                s_data = source_in.read(s_section.size)        # Raw Size
                s_sha256.update(s_data)
                source_dict[s_section.name + ' SHA256'] = s_sha256.hexdigest()
                source_in.seek(s_section.offset)
                s_head = source_in.read(32)
                source_head = b2a_hex(s_head).decode()
                source_dict[s_section.name + ' First Hex'] = source_head
                source_dict[s_section.name + ' SSDeep'] = ppdeep.hash(s_data)


            for t_section in target_sections:
                t_flags = ""
                for flag in t_section.characteristics_lists:
                    t_flags += str(flag).split(".")[-1] + " "
                target_dict[t_section.name + ' Offset'] = t_section.offset
                target_dict[t_section.name + ' Size'] = t_section.size
                target_dict[t_section.name + ' Percent of File'] = round(t_section.size / target_file_size * 100, 2)
                target_dict[t_section.name + ' Virtual Address'] = t_section.virtual_address
                target_dict[t_section.name + ' Virtual Size'] = t_section.virtual_size
                target_dict[t_section.name + ' Flags'] = t_flags
                target_dict[t_section.name + ' Entropy'] = round(t_section.entropy, 4)
                target_in.seek(t_section.offset)               # Raw Address Offset
                t_sha256 = hashlib.sha256()
                t_data = source_in.read(t_section.size)        # Raw Size
                t_sha256.update(t_data)
                target_dict[t_section.name + ' SHA256'] = t_sha256.hexdigest()
                target_in.seek(t_section.offset)
                t_head = target_in.read(32)
                target_head = b2a_hex(t_head).decode()
                target_dict[t_section.name + ' First Hex'] = target_head
                target_dict[t_section.name + ' SSDeep'] = ppdeep.hash(t_data)
            same_count = 0
            very_similiar_count = 0
            similiar_count = 0
            for k, v in source_dict.items():
                for k2, v2 in target_dict.items():
                    source_info = (str(k) + " (" + str(v) + ")")
                    target_info = (str(k2) + " (" + str(v2) + ")")
                    output_both = source_info + "\n" + target_info
                    if k == k2:
                        if v == v2:
                            print('--SAME')
                            print(output_both)
                            same_count +=1
                        else:
                            if 'SSDeep' in k and 'SSDeep' in k2:
                                result = ppdeep.compare(v, v2)
                                print('--DIFF')
                                print(output_both)
                                print("SSDeep Comparison: " + str(result) + "%")
                            elif type(v) == int and type(v2) == int:
                                if v > v2:
                                    percentage = round((v - v2) * 100 / v, 3)
                                    if percentage <= 0.5:
                                        print('--INTEGER PAIR - ' + str(percentage) + "% Difference - VERY SIMILIAR (<=0.5)")
                                        print(output_both)
                                        similiar_count += 1
                                    else:
                                        print('--INTEGER PAIR - ' + str(percentage) + "% Difference")
                                        print(output_both)
                                else:
                                    percentage = round((v2 - v) * 100 / v2, 3)
                                    if percentage <= 0.5:
                                        print('--INTEGER PAIR - ' + str(percentage) + "% Difference - VERY SIMILIAR (<=0.5)")
                                        print(output_both)
                                        similiar_count += 1
                                    else:
                                        print('--INTEGER PAIR - ' + str(percentage) + "% Difference")
                                        print(output_both)
                            elif type(v) == float and type(v2) == float:
                                if v > v2:
                                    percentage = round((v - v2) * 100 / v, 5)
                                    if percentage <= 0.1:
                                        print('--FLOAT PAIR - ' + str(percentage) + "% Difference - VERY SIMILIAR (<=.1)")
                                        print(output_both)
                                        similiar_count += 1
                                    else:
                                        print('--FLOAT PAIR - ' + str(percentage) + "% Difference")
                                        print(output_both)
                                else:
                                    percentage = round((v2 - v) * 100 / v2, 5)
                                    if percentage <= 0.1:
                                        print('--FLOAT PAIR - ' + str(percentage) + "% Difference - VERY SIMILIAR (<=.1)")
                                        print(output_both)
                                        similiar_count += 1
                                    else:
                                        print('--FLOAT PAIR - ' + str(percentage) + "% Difference")
                                        print(output_both)
                            else:
                                print('--DIFF')
                                print(output_both)

        scoring_metric = (same_count * 3) + (similiar_count * 2)
        print('Total comparisons from Source : ' + str(len(source_dict)))
        print('Total comparisons from Target : ' + str(len(target_dict)))
        print('Sections that were Identical  : ' + str(same_count))
        print('Sections that were Similar    : ' + str(similiar_count))
        print("")
        if scoring_metric <= 40:
            print('Scoring Metric: Different (' + str(scoring_metric) + ")")
        elif scoring_metric <= 60 and scoring_metric > 40:
            print('Scoring Metric: Minor Similiarities (' + str(scoring_metric) + ")")
        elif scoring_metric <= 90 and scoring_metric > 60:
            print('Scoring Metric: Moderate Similiaties (' + str(scoring_metric) + ")")
        elif scoring_metric <= 130 and scoring_metric > 90:
            print('Scoring Metric: Significant Similiaties (' + str(scoring_metric) + ")")
        elif scoring_metric <= 160 and scoring_metric > 130:
            print('Scoring Metric: Extremely High Similarities (' + str(scoring_metric) + ")")
        elif scoring_metric > 160:
            print('Scoring Metric: Almost the Same File (' + str(scoring_metric) + ")")
    else:
        print(source_file_name + " - " + str(source_fuzzy))
        print(target_file_name + " - " + str(target_fuzzy))
        print('Scoring Metric: Same File Using SSDeep')

file_1_source - ""
file_2_target = ""
source_file = file_1_source
target_file = file_2_target
compare(source_file, target_file)
